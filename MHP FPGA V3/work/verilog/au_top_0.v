/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input carry,
    input sum,
    input usb_rx,
    output reg usb_tx
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  localparam IDLE_state = 4'd0;
  localparam A_state = 4'd1;
  localparam B_state = 4'd2;
  localparam C_state = 4'd3;
  localparam D_state = 4'd4;
  localparam E_state = 4'd5;
  localparam F_state = 4'd6;
  localparam G_state = 4'd7;
  localparam H_state = 4'd8;
  localparam END_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  localparam CYCLE = 5'h1c;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    led = 8'h00;
    usb_tx = usb_rx;
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[0+0-:1] == 1'h1) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        led[0+2-:3] = 1'h0;
        io_led[8+0+2-:3] = 1'h0;
        if (carry == 1'h0 && sum == 1'h0) begin
          io_led[16+7+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = B_state;
          M_counter_d = 1'h0;
        end
      end
      B_state: begin
        led[0+2-:3] = 1'h1;
        io_led[8+0+2-:3] = 1'h1;
        if (carry == 1'h0 && sum == 1'h1) begin
          io_led[16+6+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = C_state;
          M_counter_d = 1'h0;
        end
      end
      C_state: begin
        led[0+2-:3] = 2'h2;
        io_led[8+0+2-:3] = 2'h2;
        if (carry == 1'h0 && sum == 1'h1) begin
          io_led[16+5+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = D_state;
          M_counter_d = 1'h0;
        end
      end
      D_state: begin
        led[0+2-:3] = 2'h3;
        io_led[8+0+2-:3] = 2'h3;
        if (carry == 1'h1 && sum == 1'h0) begin
          io_led[16+4+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = E_state;
          M_counter_d = 1'h0;
        end
      end
      E_state: begin
        led[0+2-:3] = 3'h4;
        io_led[8+0+2-:3] = 3'h4;
        if (carry == 1'h0 && sum == 1'h1) begin
          io_led[16+3+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = F_state;
          M_counter_d = 1'h0;
        end
      end
      F_state: begin
        led[0+2-:3] = 3'h5;
        io_led[8+0+2-:3] = 3'h5;
        if (carry == 1'h1 && sum == 1'h0) begin
          io_led[16+2+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = G_state;
          M_counter_d = 1'h0;
        end
      end
      G_state: begin
        led[0+2-:3] = 3'h6;
        io_led[8+0+2-:3] = 3'h6;
        if (carry == 1'h1 && sum == 1'h0) begin
          io_led[16+1+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = H_state;
          M_counter_d = 1'h0;
        end
      end
      H_state: begin
        led[0+2-:3] = 3'h7;
        io_led[8+0+2-:3] = 3'h7;
        if (carry == 1'h1 && sum == 1'h1) begin
          io_led[16+0+0-:1] = 1'h1;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = END_state;
          M_counter_d = 1'h0;
        end
      end
      END_state: begin
        io_led[16+0+7-:8] = $signed(2'h3);
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
